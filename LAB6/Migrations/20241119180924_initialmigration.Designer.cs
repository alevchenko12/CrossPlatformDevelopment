// <auto-generated />
using System;
using LAB6.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LAB6.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241119180924_initialmigration")]
    partial class initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LAB6.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherBrandDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("LAB6.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherCustomerDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("LAB6.Models.CustomerOrder", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatusCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerOrders");
                });

            modelBuilder.Entity("LAB6.Models.CustomerOrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RetailerId")
                        .HasColumnType("int");

                    b.Property<string>("OtherDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId", "RetailerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RetailerId");

                    b.ToTable("CustomerOrderProducts");
                });

            modelBuilder.Entity("LAB6.Models.CustomerOrderSpecialOffer", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("SpecialOfferId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "SpecialOfferId");

                    b.HasIndex("SpecialOfferId");

                    b.ToTable("CustomerOrderSpecialOffers");
                });

            modelBuilder.Entity("LAB6.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("OtherProductDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProductTypeCode");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("LAB6.Models.ProductColour", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ColourCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.HasKey("ProductId", "ColourCode");

                    b.HasIndex("ColourCode");

                    b.ToTable("ProductColours");
                });

            modelBuilder.Entity("LAB6.Models.RefColour", b =>
                {
                    b.Property<string>("ColourCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColourDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ColourCode");

                    b.ToTable("RefColours");
                });

            modelBuilder.Entity("LAB6.Models.RefProductType", b =>
                {
                    b.Property<string>("ProductTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ParentProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductTypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductTypeCode");

                    b.ToTable("RefProductTypes");
                });

            modelBuilder.Entity("LAB6.Models.Retailer", b =>
                {
                    b.Property<int>("RetailerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RetailerId"));

                    b.Property<string>("OtherRetailerDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RetailerAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RetailerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RetailerWebSiteUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RetailerId");

                    b.ToTable("Retailers");
                });

            modelBuilder.Entity("LAB6.Models.RetailerProductPrice", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RetailerId")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "RetailerId");

                    b.HasIndex("RetailerId");

                    b.ToTable("RetailerProductPrices");
                });

            modelBuilder.Entity("LAB6.Models.SpecialOffer", b =>
                {
                    b.Property<int>("SpecialOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialOfferId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OtherDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RetailerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TermsAndConditions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecialOfferId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RetailerId");

                    b.ToTable("SpecialOffers");
                });

            modelBuilder.Entity("LAB6.Models.CustomerOrder", b =>
                {
                    b.HasOne("LAB6.Models.Customer", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LAB6.Models.CustomerOrderProduct", b =>
                {
                    b.HasOne("LAB6.Models.CustomerOrder", "CustomerOrder")
                        .WithMany("CustomerOrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LAB6.Models.Product", "Product")
                        .WithMany("CustomerOrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LAB6.Models.Retailer", "Retailer")
                        .WithMany("CustomerOrderProducts")
                        .HasForeignKey("RetailerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomerOrder");

                    b.Navigation("Product");

                    b.Navigation("Retailer");
                });

            modelBuilder.Entity("LAB6.Models.CustomerOrderSpecialOffer", b =>
                {
                    b.HasOne("LAB6.Models.CustomerOrder", "CustomerOrder")
                        .WithMany("CustomerOrderSpecialOffers")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LAB6.Models.SpecialOffer", "SpecialOffer")
                        .WithMany("CustomerOrderSpecialOffers")
                        .HasForeignKey("SpecialOfferId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CustomerOrder");

                    b.Navigation("SpecialOffer");
                });

            modelBuilder.Entity("LAB6.Models.Product", b =>
                {
                    b.HasOne("LAB6.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LAB6.Models.RefProductType", "RefProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("RefProductType");
                });

            modelBuilder.Entity("LAB6.Models.ProductColour", b =>
                {
                    b.HasOne("LAB6.Models.RefColour", "RefColour")
                        .WithMany("ProductColours")
                        .HasForeignKey("ColourCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LAB6.Models.Product", "Product")
                        .WithMany("ProductColours")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("RefColour");
                });

            modelBuilder.Entity("LAB6.Models.RetailerProductPrice", b =>
                {
                    b.HasOne("LAB6.Models.Product", "Product")
                        .WithMany("RetailerProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LAB6.Models.Retailer", "Retailer")
                        .WithMany("RetailerProductPrices")
                        .HasForeignKey("RetailerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Retailer");
                });

            modelBuilder.Entity("LAB6.Models.SpecialOffer", b =>
                {
                    b.HasOne("LAB6.Models.Product", "Product")
                        .WithMany("SpecialOffers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LAB6.Models.Retailer", "Retailer")
                        .WithMany("SpecialOffers")
                        .HasForeignKey("RetailerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Retailer");
                });

            modelBuilder.Entity("LAB6.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("LAB6.Models.Customer", b =>
                {
                    b.Navigation("CustomerOrders");
                });

            modelBuilder.Entity("LAB6.Models.CustomerOrder", b =>
                {
                    b.Navigation("CustomerOrderProducts");

                    b.Navigation("CustomerOrderSpecialOffers");
                });

            modelBuilder.Entity("LAB6.Models.Product", b =>
                {
                    b.Navigation("CustomerOrderProducts");

                    b.Navigation("ProductColours");

                    b.Navigation("RetailerProductPrices");

                    b.Navigation("SpecialOffers");
                });

            modelBuilder.Entity("LAB6.Models.RefColour", b =>
                {
                    b.Navigation("ProductColours");
                });

            modelBuilder.Entity("LAB6.Models.RefProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("LAB6.Models.Retailer", b =>
                {
                    b.Navigation("CustomerOrderProducts");

                    b.Navigation("RetailerProductPrices");

                    b.Navigation("SpecialOffers");
                });

            modelBuilder.Entity("LAB6.Models.SpecialOffer", b =>
                {
                    b.Navigation("CustomerOrderSpecialOffers");
                });
#pragma warning restore 612, 618
        }
    }
}
